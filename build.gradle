buildscript {
	ext {
		springBootVersion = '2.5.2'
		eclipsePersistenceVersion = '2.1.1'
		kryoVersion = '4.0.2'
		springShellVersion = '1.1.0.RELEASE'
		eclipseEmfXmiVersion = '2.11.1-v20150805-0538'
		eclipseUml2CommonVersion = '2.0.0-v20140602-0749'
		eclipseEmfCommonVersion = '2.11.0-v20150805-0538'
		eclipseUml2TypesVersion = '2.0.0-v20140602-0749'
		eclipseEmfEcoreVersion = '2.11.1-v20150805-0538'
		eclipseUml2UmlVersion = '5.0.0-v20140602-0749'
		curatorVersion = '2.11.1'
		reactorBlockHoundVersion = '1.0.4.RELEASE'
		javaProjects = subprojects - project(":spring-statemachine-bom")
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
	}
}

plugins {
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

configure(allprojects) { project ->
    apply plugin: "io.spring.dependency-management"
}

// configure([rootProject] + javaProjects) { project ->
configure(javaProjects) { project ->
	apply plugin: 'java-library'
	apply plugin: 'java-test-fixtures'
	apply plugin: 'maven-publish'

	group = 'org.springframework.statemachinex'

	repositories {
		mavenCentral()
		maven { url 'https://repo.springsource.org/libs-snapshot' }
		maven { url 'https://repo.springsource.org/libs-release' }
		maven { url 'https://repo.springsource.org/libs-milestone' }
	}

	dependencyManagement {
		imports {
			mavenBom "org.springframework.boot:spring-boot-dependencies:$springBootVersion"
		}
		dependencies {
			dependency "org.eclipse.persistence:javax.persistence:$eclipsePersistenceVersion"
			dependency "com.esotericsoftware:kryo-shaded:$kryoVersion"
			dependency "org.springframework.shell:spring-shell:$springShellVersion"
			dependency "org.eclipse.uml2:uml:$eclipseUml2UmlVersion"
			dependency "org.eclipse.uml2:types:$eclipseUml2TypesVersion"
			dependency "org.eclipse.uml2:common:$eclipseUml2CommonVersion"
			dependency "org.eclipse.emf:org.eclipse.emf.ecore.xmi:$eclipseEmfXmiVersion"
			dependency "org.eclipse.emf:org.eclipse.emf.ecore:$eclipseEmfEcoreVersion"
			dependency "org.eclipse.emf:org.eclipse.emf.common:$eclipseEmfCommonVersion"
			dependency "org.apache.curator:curator-recipes:$curatorVersion"
			dependency "org.apache.curator:curator-test:$curatorVersion"
			dependency "io.projectreactor.tools:blockhound:$reactorBlockHoundVersion"
			dependency "io.projectreactor.tools:blockhound-junit-platform:$reactorBlockHoundVersion"
		}
	}

	dependencies {
		testImplementation 'org.junit.jupiter:junit-jupiter-api'
		testImplementation 'io.projectreactor.tools:blockhound'
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testImplementation 'org.junit.jupiter:junit-jupiter-engine'
		if (project.hasProperty('statemachineBlockHound') && statemachineBlockHound.toBoolean()) {
			testImplementation 'org.junit.platform:junit-platform-launcher'
			testImplementation 'io.projectreactor.tools:blockhound-junit-platform'
		}
	}

	test {
		useJUnitPlatform {
			if (!project.hasProperty('statemachineIncludeTags') && !project.hasProperty('statemachineExcludeTags')) {
				excludeTags = ['smoke']
			} else {
				if (project.hasProperty('statemachineIncludeTags') && statemachineIncludeTags.size() > 0) {
						includeTags = statemachineIncludeTags.split(',')
				}
				if (project.hasProperty('statemachineExcludeTags') && statemachineExcludeTags.size() > 0) {
						excludeTags = statemachineExcludeTags.split(',')
				}
			}
		}
		exclude '**/*IntegrationTests.*'
		if (project.hasProperty('statemachineTestResults') && statemachineTestResults.toBoolean()) {
			afterSuite { desc, result ->
				if (!desc.parent) {
					def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
					def startItem = '|  ', endItem = '  |'
					def repeatLength = startItem.length() + output.length() + endItem.length()
					println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
				}
			}
		}
	}

	java {
		withSourcesJar()
		withJavadocJar()
		registerFeature('security') {
			usingSourceSet(sourceSets.main)
		}
		registerFeature('persistence') {
			usingSourceSet(sourceSets.main)
		}
		registerFeature('data') {
			usingSourceSet(sourceSets.main)
		}
		registerFeature('metadata') {
			usingSourceSet(sourceSets.main)
		}
		registerFeature('micrometer') {
			usingSourceSet(sourceSets.main)
		}
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				from components.java
			}
		}
	}
}

configure(rootProject) {
	description = 'Spring State Machine'
}
